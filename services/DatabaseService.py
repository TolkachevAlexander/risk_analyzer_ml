import logging
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from contextlib import contextmanager

from config.settings import DB_CONFIG


class DatabaseService:
    def __init__(self):
        self.engine = None
        self.SessionLocal = None
        self.logger = logging.getLogger(__name__)
        self._connect()

    def _connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            database_url = (
                f"postgresql://{DB_CONFIG['user']}:{DB_CONFIG['password']}"
                f"@{DB_CONFIG['host']}:{DB_CONFIG['port']}/{DB_CONFIG['database']}"
            )

            # –°–æ–∑–¥–∞–µ–º engine —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            self.engine = create_engine(
                database_url,
                pool_size=5,
                pool_recycle=3600,
                echo=DB_CONFIG.get('DEBUG', False)  # –õ–æ–≥–∏—Ä—É–µ–º SQL —Ç–æ–ª—å–∫–æ –≤ DEBUG —Ä–µ–∂–∏–º–µ
            )

            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
            self.SessionLocal = sessionmaker(bind=self.engine)

            self.logger.info("‚úÖ Database connected successfully")

        except Exception as e:
            self.logger.error(f"‚ùå Database connection failed: {e}")
            raise

    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with self.engine.connect() as conn:
                result = conn.execute(text("SELECT 1"))
                return result.scalar() == 1
        except Exception as e:
            self.logger.error(f"Connection test failed: {e}")
            return False

    @contextmanager
    def get_session(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏–µ–π –ë–î"""
        session = self.SessionLocal()
        try:
            yield session
            session.commit()
        except Exception as e:
            session.rollback()
            self.logger.error(f"Database error: {e}")
            raise
        finally:
            session.close()

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.engine:
            self.engine.dispose()
            self.logger.info("üîå Database connection closed")